#!/usr/bin/env python3
"""
üîç Teste de Comunica√ß√£o Frontend-Backend Desfollow
Verifica se os dados est√£o fluindo corretamente entre frontend e backend
"""

import requests
import json
import time
from typing import Dict, Any

# URLs de teste
BACKEND_BASE_URL = "https://api.desfollow.com.br"
API_BASE_URL = "https://api.desfollow.com.br/api"
FRONTEND_BASE_URL = "https://desfollow.com.br"

# Username de teste
TEST_USERNAME = "jordanbitencourt"

def test_backend_health():
    """Testa se o backend est√° respondendo"""
    print("\nüè• 1. TESTANDO SA√öDE DO BACKEND")
    print("=" * 50)
    
    try:
        response = requests.get(f"{BACKEND_BASE_URL}/health")
        print(f"üìä Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Backend est√° saud√°vel: {data}")
            return True
        else:
            print(f"‚ùå Backend n√£o est√° saud√°vel: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao conectar com backend: {e}")
        return False

def test_scan_start():
    """Testa in√≠cio de scan"""
    print("\nüöÄ 2. TESTANDO IN√çCIO DE SCAN")
    print("=" * 50)
    
    try:
        payload = {"username": TEST_USERNAME}
        response = requests.post(f"{API_BASE_URL}/scan", json=payload)
        
        print(f"üìä Status Code: {response.status_code}")
        print(f"üìÑ Response: {response.text}")
        
        if response.status_code == 200:
            data = response.json()
            job_id = data.get("job_id")
            print(f"‚úÖ Scan iniciado com sucesso!")
            print(f"üÜî Job ID: {job_id}")
            return job_id
        else:
            print(f"‚ùå Erro ao iniciar scan: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå Erro ao iniciar scan: {e}")
        return None

def test_scan_status(job_id: str):
    """Testa consulta de status"""
    print(f"\nüìä 3. TESTANDO STATUS DO SCAN")
    print("=" * 50)
    
    max_attempts = 10
    for attempt in range(1, max_attempts + 1):
        try:
            response = requests.get(f"{API_BASE_URL}/scan/{job_id}")
            
            print(f"üîÑ Tentativa {attempt}/{max_attempts}")
            print(f"üìä Status Code: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                status = data.get("status")
                print(f"üìà Status: {status}")
                
                # Verificar se temos dados do perfil
                profile_info = data.get("profile_info")
                if profile_info:
                    print(f"üë§ Perfil encontrado: {profile_info.get('followers_count', 0)} seguidores")
                
                # Verificar contadores
                followers_count = data.get("followers_count", 0)
                following_count = data.get("following_count", 0)
                print(f"üìä Dados capturados: {followers_count} seguidores, {following_count} seguindo")
                
                if status == "done":
                    print(f"‚úÖ Scan conclu√≠do!")
                    print(f"üëª Ghosts encontrados: {data.get('count', 0)}")
                    print(f"üîç Real ghosts: {data.get('real_ghosts_count', 0)}")
                    print(f"‚≠ê Famous ghosts: {data.get('famous_ghosts_count', 0)}")
                    return data
                elif status == "error":
                    error = data.get("error", "Erro desconhecido")
                    print(f"‚ùå Scan falhou: {error}")
                    return None
                else:
                    print(f"‚è≥ Aguardando... (status: {status})")
            else:
                print(f"‚ùå Erro na consulta: {response.text}")
            
            time.sleep(2)
            
        except Exception as e:
            print(f"‚ùå Erro na tentativa {attempt}: {e}")
            time.sleep(2)
    
    print(f"‚è∞ Timeout ap√≥s {max_attempts} tentativas")
    return None

def test_history_api():
    """Testa API de hist√≥rico"""
    print(f"\nüìã 4. TESTANDO API DE HIST√ìRICO")
    print("=" * 50)
    
    try:
        response = requests.get(f"{API_BASE_URL}/user/{TEST_USERNAME}/history")
        
        print(f"üìä Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Hist√≥rico obtido com sucesso!")
            print(f"üìä N√∫mero de scans no hist√≥rico: {len(data)}")
            
            if data:
                latest = data[0]
                print(f"üïê √öltimo scan: {latest.get('created_at')}")
                print(f"üìà Status: {latest.get('status')}")
                print(f"üëª Ghosts: {latest.get('ghosts_count', 0)}")
            
            return data
        else:
            print(f"üì≠ Nenhum hist√≥rico encontrado: {response.text}")
            return []
    except Exception as e:
        print(f"‚ùå Erro ao consultar hist√≥rico: {e}")
        return None

def test_cors():
    """Testa configura√ß√£o CORS"""
    print(f"\nüåê 5. TESTANDO CONFIGURA√á√ÉO CORS")
    print("=" * 50)
    
    try:
        # Simular requisi√ß√£o CORS do frontend
        headers = {
            "Origin": FRONTEND_BASE_URL,
            "Access-Control-Request-Method": "POST",
            "Access-Control-Request-Headers": "Content-Type"
        }
        
        response = requests.options(f"{API_BASE_URL}/scan", headers=headers)
        print(f"üìä Preflight Status: {response.status_code}")
        print(f"üîí CORS Headers: {dict(response.headers)}")
        
        if response.status_code in [200, 204]:
            print(f"‚úÖ CORS configurado corretamente!")
            return True
        else:
            print(f"‚ùå Problema na configura√ß√£o CORS")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste CORS: {e}")
        return False

def main():
    """Executa todos os testes"""
    print("üß™ TESTE COMPLETO DE COMUNICA√á√ÉO FRONTEND-BACKEND")
    print("=" * 60)
    print(f"üñ•Ô∏è  Backend URL: {BACKEND_BASE_URL}")
    print(f"üéØ API Base URL: {API_BASE_URL}")
    print(f"üåê Frontend URL: {FRONTEND_BASE_URL}")
    print(f"üë§ Username de teste: {TEST_USERNAME}")
    
    # 1. Testar sa√∫de do backend
    if not test_backend_health():
        print("\n‚ùå Backend n√£o est√° respondendo. Parando testes.")
        return
    
    # 2. Testar CORS
    test_cors()
    
    # 3. Testar in√≠cio de scan
    job_id = test_scan_start()
    if not job_id:
        print("\n‚ùå N√£o foi poss√≠vel iniciar scan. Parando testes.")
        return
    
    # 4. Testar status do scan
    scan_result = test_scan_status(job_id)
    
    # 5. Testar hist√≥rico
    test_history_api()
    
    # Resumo final
    print("\nüéØ RESUMO DOS TESTES")
    print("=" * 50)
    
    if scan_result and scan_result.get("status") == "done":
        print("‚úÖ Comunica√ß√£o frontend-backend funcionando!")
        print("‚úÖ Dados sendo transmitidos corretamente!")
        
        # Verificar se h√° dados reais
        followers_count = scan_result.get("followers_count", 0)
        following_count = scan_result.get("following_count", 0)
        
        if followers_count > 0 or following_count > 0:
            print("‚úÖ APIs do Instagram retornando dados!")
        else:
            print("‚ö†Ô∏è  APIs do Instagram retornando 0 dados - verificar configura√ß√£o")
            
    else:
        print("‚ùå Problemas na comunica√ß√£o detectados")
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    main()