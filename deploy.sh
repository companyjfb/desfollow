#!/bin/bash

# Script de Deploy Completo para Desfollow
# Frontend: Hostinger
# Backend: VPS Hostinger
# Database: Supabase

echo "üöÄ Iniciando deploy do Desfollow..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERRO] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[AVISO] $1${NC}"
}

# Verifica se est√° no diret√≥rio correto
if [ ! -f "package.json" ]; then
    error "Execute este script na raiz do projeto Desfollow"
    exit 1
fi

log "üìã Verificando pr√©-requisitos..."

# Verifica se Node.js est√° instalado
if ! command -v node &> /dev/null; then
    error "Node.js n√£o encontrado. Instale o Node.js primeiro."
    exit 1
fi

# Verifica se Python est√° instalado
if ! command -v python3 &> /dev/null; then
    error "Python 3 n√£o encontrado. Instale o Python 3 primeiro."
    exit 1
fi

log "‚úÖ Pr√©-requisitos verificados"

# ============================================================================
# FRONTEND BUILD
# ============================================================================

log "üî® Construindo frontend..."

# Instala depend√™ncias
npm install

# Build para produ√ß√£o
npm run build

if [ $? -eq 0 ]; then
    log "‚úÖ Frontend constru√≠do com sucesso"
else
    error "‚ùå Erro ao construir frontend"
    exit 1
fi

# ============================================================================
# BACKEND PREPARATION
# ============================================================================

log "üîß Preparando backend..."

# Vai para o diret√≥rio do backend
cd backend

# Instala depend√™ncias Python
pip install -r requirements.txt

# Verifica se o arquivo .env existe
if [ ! -f ".env" ]; then
    warning "‚ö†Ô∏è Arquivo .env n√£o encontrado. Copiando exemplo..."
    cp env.example .env
    warning "üìù Configure as vari√°veis de ambiente no arquivo .env"
fi

# Volta para o diret√≥rio raiz
cd ..

# ============================================================================
# DOCKER BUILD (OPCIONAL)
# ============================================================================

if command -v docker &> /dev/null; then
    log "üê≥ Construindo imagem Docker..."
    
    cd backend
    docker build -t desfollow-backend .
    
    if [ $? -eq 0 ]; then
        log "‚úÖ Imagem Docker constru√≠da com sucesso"
    else
        warning "‚ö†Ô∏è Erro ao construir imagem Docker"
    fi
    
    cd ..
else
    warning "‚ö†Ô∏è Docker n√£o encontrado. Pulando build Docker."
fi

# ============================================================================
# DEPLOY INSTRUCTIONS
# ============================================================================

log "üìã Instru√ß√µes de Deploy:"

echo ""
echo "üéØ FRONTEND (Hostinger):"
echo "1. Fa√ßa upload da pasta 'dist' para o seu dom√≠nio"
echo "2. Configure o dom√≠nio no painel da Hostinger"
echo "3. Configure HTTPS no painel da Hostinger"
echo ""

echo "üîß BACKEND (VPS Hostinger):"
echo "1. Conecte via SSH ao seu VPS"
echo "2. Clone o reposit√≥rio: git clone <seu-repo>"
echo "3. Configure as vari√°veis de ambiente:"
echo "   - DATABASE_URL (Supabase)"
echo "   - RAPIDAPI_KEY"
echo "   - SECRET_KEY"
echo "   - FRONTEND_URL"
echo "4. Execute: pip install -r requirements.txt"
echo "5. Execute: gunicorn app.main:app -c gunicorn.conf.py"
echo ""

echo "üóÑÔ∏è BANCO DE DADOS (Supabase):"
echo "1. Crie um projeto no Supabase"
echo "2. Configure as tabelas (users, scans, payments)"
echo "3. Obtenha a URL de conex√£o"
echo "4. Configure no arquivo .env"
echo ""

echo "üîê CONFIGURA√á√ïES DE SEGURAN√áA:"
echo "1. Gere uma SECRET_KEY forte"
echo "2. Configure HTTPS no frontend"
echo "3. Configure firewall no VPS"
echo "4. Configure rate limiting"
echo ""

log "‚úÖ Script de deploy conclu√≠do!"
echo ""
echo "üìö Pr√≥ximos passos:"
echo "1. Configure as vari√°veis de ambiente"
echo "2. Deploy no Hostinger (frontend)"
echo "3. Deploy no VPS (backend)"
echo "4. Configure o banco Supabase"
echo "5. Teste a aplica√ß√£o" 