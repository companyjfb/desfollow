@echo off
REM Script de Deploy para Windows - Desfollow
REM Frontend: Hostinger
REM Backend: VPS Hostinger  
REM Database: Supabase

echo üöÄ Iniciando deploy do Desfollow...

REM Verifica se est√° no diret√≥rio correto
if not exist "package.json" (
    echo ‚ùå Execute este script na raiz do projeto Desfollow
    pause
    exit /b 1
)

echo üìã Verificando pr√©-requisitos...

REM Verifica se Node.js est√° instalado
node --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå Node.js n√£o encontrado. Instale o Node.js primeiro.
    pause
    exit /b 1
)

REM Verifica se Python est√° instalado
python --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå Python n√£o encontrado. Instale o Python primeiro.
    pause
    exit /b 1
)

echo ‚úÖ Pr√©-requisitos verificados

REM ============================================================================
REM FRONTEND BUILD
REM ============================================================================

echo üî® Construindo frontend...

REM Instala depend√™ncias
call npm install

REM Build para produ√ß√£o
call npm run build

if errorlevel 1 (
    echo ‚ùå Erro ao construir frontend
    pause
    exit /b 1
) else (
    echo ‚úÖ Frontend constru√≠do com sucesso
)

REM ============================================================================
REM BACKEND PREPARATION
REM ============================================================================

echo üîß Preparando backend...

REM Vai para o diret√≥rio do backend
cd backend

REM Instala depend√™ncias Python
pip install -r requirements.txt

REM Verifica se o arquivo .env existe
if not exist ".env" (
    echo ‚ö†Ô∏è Arquivo .env n√£o encontrado. Copiando exemplo...
    copy env.example .env
    echo üìù Configure as vari√°veis de ambiente no arquivo .env
)

REM Volta para o diret√≥rio raiz
cd ..

REM ============================================================================
REM DEPLOY INSTRUCTIONS
REM ============================================================================

echo üìã Instru√ß√µes de Deploy:

echo.
echo üéØ FRONTEND (Hostinger):
echo 1. Fa√ßa upload da pasta 'dist' para o seu dom√≠nio
echo 2. Configure o dom√≠nio no painel da Hostinger
echo 3. Configure HTTPS no painel da Hostinger
echo.

echo üîß BACKEND (VPS Hostinger):
echo 1. Conecte via SSH ao seu VPS
echo 2. Clone o reposit√≥rio: git clone ^<seu-repo^>
echo 3. Configure as vari√°veis de ambiente:
echo    - DATABASE_URL (Supabase)
echo    - RAPIDAPI_KEY
echo    - SECRET_KEY
echo    - FRONTEND_URL
echo 4. Execute: pip install -r requirements.txt
echo 5. Execute: gunicorn app.main:app -c gunicorn.conf.py
echo.

echo üóÑÔ∏è BANCO DE DADOS (Supabase):
echo 1. Crie um projeto no Supabase
echo 2. Configure as tabelas (users, scans, payments)
echo 3. Obtenha a URL de conex√£o
echo 4. Configure no arquivo .env
echo.

echo üîê CONFIGURA√á√ïES DE SEGURAN√áA:
echo 1. Gere uma SECRET_KEY forte
echo 2. Configure HTTPS no frontend
echo 3. Configure firewall no VPS
echo 4. Configure rate limiting
echo.

echo ‚úÖ Script de deploy conclu√≠do!
echo.
echo üìö Pr√≥ximos passos:
echo 1. Configure as vari√°veis de ambiente
echo 2. Deploy no Hostinger (frontend)
echo 3. Deploy no VPS (backend)
echo 4. Configure o banco Supabase
echo 5. Teste a aplica√ß√£o
echo.

pause 