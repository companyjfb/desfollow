#!/bin/bash

echo "üß™ Teste Completo do Sistema de Scan P√≥s-Corre√ß√£o..."
echo "===================================================="
echo ""

cd /root/desfollow

echo "üîç 1. TESTANDO SCAN COMPLETO..."

# Testar com um username real para ver todo o fluxo
TEST_USERNAME="instagram"

echo "üìù Iniciando scan para: $TEST_USERNAME"

SCAN_RESPONSE=$(curl -s -w "%{http_code}" \
  -X POST \
  -H "Content-Type: application/json" \
  -d "{\"username\":\"$TEST_USERNAME\"}" \
  http://127.0.0.1:8000/api/scan)

HTTP_CODE="${SCAN_RESPONSE: -3}"
RESPONSE_BODY="${SCAN_RESPONSE%???}"

echo "üìä Status Code: $HTTP_CODE"
echo "üìã Resposta: $RESPONSE_BODY"

if [ "$HTTP_CODE" = "200" ]; then
    JOB_ID=$(echo "$RESPONSE_BODY" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('job_id', 'N/A'))" 2>/dev/null)
    
    if [ "$JOB_ID" != "N/A" ]; then
        echo "‚úÖ Job criado: $JOB_ID"
        echo ""
        
        # Monitorar o progresso do scan
        echo "üìä Monitorando progresso do scan..."
        
        for i in {1..6}; do
            echo "‚è≥ Verifica√ß√£o $i/6 (ap√≥s ${i}0 segundos)..."
            sleep 10
            
            STATUS_RESPONSE=$(curl -s http://127.0.0.1:8000/api/scan/$JOB_ID)
            
            # Extrair informa√ß√µes chave
            STATUS=$(echo "$STATUS_RESPONSE" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('status', 'unknown'))" 2>/dev/null)
            PROFILE_INFO=$(echo "$STATUS_RESPONSE" | python3 -c "import sys, json; data=json.load(sys.stdin); print('SIM' if data.get('profile_info') else 'N√ÉO')" 2>/dev/null)
            COUNT=$(echo "$STATUS_RESPONSE" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('count', 0))" 2>/dev/null)
            ERROR=$(echo "$STATUS_RESPONSE" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('error', 'N/A'))" 2>/dev/null)
            
            echo "   üìã Status: $STATUS"
            echo "   üë§ Profile Info: $PROFILE_INFO"
            echo "   üî¢ Count: $COUNT"
            if [ "$ERROR" != "N/A" ] && [ "$ERROR" != "None" ]; then
                echo "   ‚ùå Error: $ERROR"
            fi
            
            # Se conclu√≠do, mostrar resultado final
            if [ "$STATUS" = "done" ]; then
                echo ""
                echo "üéâ SCAN CONCLU√çDO!"
                echo "üìã Resultado final:"
                echo "$STATUS_RESPONSE" | python3 -m json.tool 2>/dev/null || echo "$STATUS_RESPONSE"
                break
            elif [ "$STATUS" = "error" ]; then
                echo ""
                echo "‚ùå SCAN COM ERRO!"
                echo "üìã Detalhes do erro:"
                echo "$STATUS_RESPONSE" | python3 -m json.tool 2>/dev/null || echo "$STATUS_RESPONSE"
                break
            fi
            
            echo ""
        done
        
        # Se ainda estiver rodando ap√≥s 1 minuto, algo pode estar errado
        if [ "$STATUS" = "running" ]; then
            echo "‚ö†Ô∏è Scan ainda em execu√ß√£o ap√≥s 1 minuto..."
            echo "üîç Verificando logs para poss√≠veis problemas..."
            
            echo ""
            echo "üìã Logs mais recentes:"
            journalctl -u desfollow --no-pager -n 15
        fi
        
    else
        echo "‚ùå N√£o foi poss√≠vel extrair job_id"
    fi
else
    echo "‚ùå Erro na requisi√ß√£o: $HTTP_CODE"
fi

echo ""
echo "üîç 2. VERIFICANDO BANCO DE DADOS..."

echo "üìä Verificando se dados foram salvos no banco..."

python3 -c "
import sys
sys.path.append('/root/desfollow')

try:
    from backend.app.database import get_db, Scan
    from datetime import datetime, timedelta
    
    # Conectar ao banco
    db_gen = get_db()
    db = next(db_gen)
    
    # Buscar scans recentes (√∫ltima hora)
    recent_scans = db.query(Scan).filter(
        Scan.created_at >= datetime.utcnow() - timedelta(hours=1)
    ).order_by(Scan.created_at.desc()).limit(5).all()
    
    print(f'üìä Scans na √∫ltima hora: {len(recent_scans)}')
    
    for scan in recent_scans:
        print(f'üìã {scan.username} - {scan.status} - Ghosts: {scan.ghosts_count or 0}')
        if scan.profile_info:
            followers = scan.profile_info.get('followers_count', 0)
            following = scan.profile_info.get('following_count', 0)
            print(f'   üë• {followers} seguidores, {following} seguindo')
        if scan.error_message:
            print(f'   ‚ùå Erro: {scan.error_message}')
        print()
    
    db.close()
    
except Exception as e:
    print(f'‚ùå Erro ao verificar banco: {e}')
"

echo ""
echo "üîç 3. VERIFICANDO CACHE DE JOBS..."

if [ -f "/tmp/desfollow_jobs.json" ]; then
    echo "üìã Cache atual de jobs:"
    cat /tmp/desfollow_jobs.json | python3 -m json.tool 2>/dev/null || echo "Cache inv√°lido"
else
    echo "‚ÑπÔ∏è Nenhum cache de jobs encontrado"
fi

echo ""
echo "üîç 4. VERIFICANDO LOGS DE ERRO..."

echo "üìã Erros recentes nos logs:"
if journalctl -u desfollow --no-pager -n 50 | grep -i error | tail -5; then
    echo "(Mostrando √∫ltimos 5 erros)"
else
    echo "‚úÖ Nenhum erro recente encontrado!"
fi

echo ""
echo "üîç 5. TESTE DE HEALTH CHECK..."

echo "üìä Verificando API health..."
HEALTH_RESPONSE=$(curl -s http://127.0.0.1:8000/api/health)
echo "üìã Health: $HEALTH_RESPONSE"

JOBS_ACTIVE=$(echo "$HEALTH_RESPONSE" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('jobs_active', 0))" 2>/dev/null)
echo "üî¢ Jobs ativos: $JOBS_ACTIVE"

echo ""
echo "‚úÖ TESTE COMPLETO FINALIZADO!"
echo ""

echo "üìä RESUMO:"
echo "=========="

# Verificar status geral
ERRORS_FOUND=0

# 1. Verificar se h√° jobs ativos em excesso
if [ "$JOBS_ACTIVE" -gt 5 ]; then
    echo "‚ö†Ô∏è Muitos jobs ativos: $JOBS_ACTIVE (limite recomendado: 5)"
    ERRORS_FOUND=$((ERRORS_FOUND + 1))
else
    echo "‚úÖ Jobs ativos dentro do limite: $JOBS_ACTIVE"
fi

# 2. Verificar se h√° erros recentes
if journalctl -u desfollow --no-pager -n 20 | grep -q -i "error\|exception\|traceback"; then
    echo "‚ö†Ô∏è Erros encontrados nos logs recentes"
    ERRORS_FOUND=$((ERRORS_FOUND + 1))
else
    echo "‚úÖ Nenhum erro cr√≠tico nos logs recentes"
fi

# 3. Verificar se backend est√° rodando
if systemctl is-active --quiet desfollow; then
    echo "‚úÖ Backend est√° ativo"
else
    echo "‚ùå Backend n√£o est√° rodando"
    ERRORS_FOUND=$((ERRORS_FOUND + 1))
fi

echo ""
if [ $ERRORS_FOUND -eq 0 ]; then
    echo "üéâ SISTEMA FUNCIONANDO CORRETAMENTE!"
    echo ""
    echo "üéØ PR√ìXIMOS PASSOS:"
    echo "   1. Testar no frontend: https://www.desfollow.com.br"
    echo "   2. Fazer alguns scans de teste"
    echo "   3. Monitorar performance"
else
    echo "‚ö†Ô∏è PROBLEMAS ENCONTRADOS: $ERRORS_FOUND"
    echo ""
    echo "üîß INVESTIGAR:"
    echo "   1. Verificar logs em tempo real: journalctl -u desfollow -f"
    echo "   2. Testar endpoints manualmente"
    echo "   3. Verificar se limpeza autom√°tica est√° funcionando"
fi 